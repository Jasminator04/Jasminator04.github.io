<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Jas' Blog</title><link>https://Jasminator04.github.io/posts/</link><description>Recent content in Posts on Jas' Blog</description><generator>Hugo -- 0.148.2</generator><language>en-us</language><lastBuildDate>Tue, 09 Sep 2025 12:05:27 +0800</lastBuildDate><atom:link href="https://Jasminator04.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>CS61B_pro0</title><link>https://Jasminator04.github.io/posts/cs61b_pro0/</link><pubDate>Tue, 09 Sep 2025 12:05:27 +0800</pubDate><guid>https://Jasminator04.github.io/posts/cs61b_pro0/</guid><description>&lt;p>2048游戏&lt;/p>
&lt;p>要求是完成Model.java中的四个方法&lt;/p>
&lt;h1 id="public-static-boolean-emptyspaceexistsboard-b">&lt;strong>public static boolean emptySpaceExists(Board b)&lt;/strong>&lt;/h1>
&lt;p>这个方法的描述如下：&lt;/p>
&lt;p>This method should return true if any of the tiles in the given board are null.&lt;/p>
&lt;p>其实就是如果棋盘上还有空位（某个格子 &lt;code>null&lt;/code>），就要返回true；如果棋盘已经满了，就返回false，游戏也就结束了。&lt;/p>
&lt;p>也就是将整个棋盘遍历，查找是否还有null格子。&lt;/p>
&lt;p>根据提示，需要使用&lt;code>Board&lt;/code> 类的 &lt;code>tile(int col, int row)&lt;/code> and &lt;code>size()&lt;/code> 方法。&lt;/p>
&lt;p>详细代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">size&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> values.&lt;span style="color:#a6e22e">length&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> Tile &lt;span style="color:#a6e22e">tile&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> col, &lt;span style="color:#66d9ef">int&lt;/span> row) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> vtile(col, row, viewPerspective);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里的values是一个二维数组，所以size()方法也就是返回棋盘的边长。&lt;/p>
&lt;p>tile方法就是获得坐标(col,row)在棋盘上的映射。（该方法返回的是一个tile对象）&lt;/p>
&lt;p>运用双重for循环遍历行列以此来达到遍历棋盘的目的，再使用tile方法获得映射，来验证是否为null。这里需要注意的是，我一开始写的是t.value()==null，但是&lt;code>Tile.value()&lt;/code> 的返回类型是 &lt;strong>&lt;code>int&lt;/code>&lt;/strong>（比如 2、4、8…），永远不可能是null，判断一个 &lt;code>Tile&lt;/code> 是否为null，要判断 &lt;code>t&lt;/code> 本身是不是 &lt;code>null&lt;/code>，而不是 &lt;code>t.value()&lt;/code> 。&lt;/p>
&lt;p>总体代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">emptySpaceExists&lt;/span>(Board b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO: Fill in this function.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> col&lt;span style="color:#f92672">=&lt;/span>0;col&lt;span style="color:#f92672">&amp;lt;&lt;/span> b.&lt;span style="color:#a6e22e">size&lt;/span>();col&lt;span style="color:#f92672">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> row&lt;span style="color:#f92672">=&lt;/span>0;row&lt;span style="color:#f92672">&amp;lt;&lt;/span> b.&lt;span style="color:#a6e22e">size&lt;/span>();row&lt;span style="color:#f92672">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Tile t&lt;span style="color:#f92672">=&lt;/span>b.&lt;span style="color:#a6e22e">tile&lt;/span>(col,row);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(t&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#66d9ef">null&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试通过。&lt;/p></description></item></channel></rss>